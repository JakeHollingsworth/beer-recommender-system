Beer Recommender Program Design

# General Principles:
underscores var naming (instead of camel case).
4 spaces
unit test all (non ML) functions
PyTorch backend
.py files
preferably write the test for a function before coding it.

# File structure

setup.py

- - request_data():
    # Uses the request module to download the data file to a local directory.

- - format_data():
    # Transform raw data into usable / pandas readable form. 

- - write_data():
    # Write formatted data to local directory. 

- - remove_raw_data():
    # Remove unformatted data from local directory.

- - main():
    # Prompt user to ensure they want to download large data.
    request_data()
    format_data()
    write_data()
    remove_raw_data()

utils.py

- - read_data():
    # Reads in data from local directory.

- - get_numpy_features():
    # Translate full pd dataframe to numpy array with the selected features.

- - train_validation_test_split():
    # Given a dataset, return a good training / validation / testing split.
    # (This is a hard problem, figure out the best way to do this).

- - read_trained_model():
    # Read in trained PyTorch model from local directory.

- - write_trained_model(): 
    # Write trained PyTorch model to local directory.

- - read_config():
    # Read the config file.

- class Normalize_Features:

- - self._means = ...

- - self.__init__(dataset)
    # Set mean/stddev or min/max using dataset.

- - self.normalize_data(X):
    # Calculate normalized features of X.

- - self.unnormalize_data(X):
    # Calculate unnormalized features of X

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

collaborative_filtering.py
# Implements item-item collaborative filtering.

- - similarity():
    # Calculates pearson correlation.

- - find_item_neighborhood():
    # Finds N items nearest to an item like by user X.

- - find_dissimilar_items():
    # Finds N dissimilar items furthest from an item disliked by user x.

- - initialize_system():
    # initialize X and Theta with small random values.

- - loss_function():
    # Collaborative filtering loss function

- - train_model():
    # Perform training loop.

- - test_model():
    # Evaluate performance of model on test set

- - cross_validate():
    # Cross validate model (maybe use Sherpa here?) -- lambda, N hyperparameters.


get_recommendations.py
# File a user can run to have the trained system predict output.


test_beer_recommender.py

- class TestRecommender(unittest.TestCase)
  # Write tests for all functions that can be reasonably tested.

config.yaml
- - Hyperparameters and program configuration.
